auca_database=# CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
    location VARCHAR(100)
);
ERROR:  no schema has been selected to create in
LINE 1: CREATE TABLE departments (
                     ^
auca_database=# \ве
invalid command \ве
Try \? for help.
auca_database=# \dt
Did not find any relations.
auca_database=# CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
    location VARCHAR(100)
);
ERROR:  no schema has been selected to create in
LINE 1: CREATE TABLE departments (
                     ^
auca_database=# \dn
List of schemas
 Name | Owner
------+-------
(0 rows)

auca_database=# CREATE SCHEMA public;
CREATE SCHEMA
auca_database=# GRANT ALL ON SCHEMA public TO postgres;
ERROR:  role "postgres" does not exist
auca_database=# GRANT ALL ON SCHEMA public TO arsen;
GRANT
auca_database=# GRANT ALL ON SCHEMA public TO public;
GRANT                                                         auca_database=# SHOW search_path;
   search_path
-----------------
 "$user", public
(1 row)

auca_database=# CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
    location VARCHAR(100)
);
CREATE TABLE
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER REFERENCES departments(dept_id)
);
CREATE TABLE
auca_database=# \dt
          List of relations
 Schema |    Name     | Type  | Owner
--------+-------------+-------+-------
 public | departments | table | arsen
 public | employees   | table | arsen
(2 rows)

auca_database=# DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE IF EXISTS departments CASCADE;
DROP TABLE
DROP TABLE
auca_database=# \dt
Did not find any relations.
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);
ERROR:  relation "departments" does not exist
auca_database=# CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
    location VARCHAR(100)
);
CREATE TABLE
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);
CREATE TABLE
auca_database=# \ве
invalid command \ве
Try \? for help.
auca_database=# \dt
          List of relations
 Schema |    Name     | Type  | Owner
--------+-------------+-------+-------
 public | departments | table | arsen
 public | employees   | table | arsen
(2 rows)

auca_database=# \dt employees
         List of relations
 Schema |   Name    | Type  | Owner
--------+-----------+-------+-------
 public | employees | table | arsen
(1 row)

auca_database=# \d employees
auca_database=# DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE IF EXISTS departments CASCADE;
DROP TABLE
DROP TABLE
auca_database=# CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
    location VARCHAR(100)
);
CREATE TABLE
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);
CREATE TABLE
auca_database=# ALTER TABLE employees
auca_database-# FOREIGN KEY (dept_id) REFERENCES departments(dept_id);
ALTER TABLE
auca_database=# DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE IF EXISTS departments CASCADE;
DROP TABLE
DROP TABLE
auca_database=# CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
auca_database=# CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
    location VARCHAR(100)
);
CREATE TABLE
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);
CREATE TABLE
auca_database=# \dt
          List of relations
 Schema |    Name     | Type  | Owner
--------+-------------+-------+-------
 public | departments | table | arsen
 public | employees   | table | arsen
(2 rows)

auca_database=# INSERT INTO departments (dept_name, location) VALUES
    ('Engineering', 'Building A'),
    ('Marketing', 'Building B'),
    ('HR', 'Building C');
INSERT 0 3
auca_database=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
    ('John', 'Smith', 1);
INSERT 0 1
auca_database=# INSERT INTO employees (first_name, last_name, dept_id) VALUES
    ('Jane', 'Doe', 99);
ERROR:  insert or update on table "employees" violates foreign key constraint "employees_dept_id_fkey"
DETAIL:  Key (dept_id)=(99) is not present in table "departments".
auca_database=# DELETE FROM departments WHERE dept_id = 1;
ERROR:  update or delete on table "departments" violates foreign key constraint "employees_dept_id_fkey" on table "employees"
DETAIL:  Key (dept_id)=(1) is still referenced from table "employees".
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE
);
ERROR:  relation "employees" already exists
auca_database=# DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE
);
CREATE TABLE
auca_database=# \dt
          List of relations
 Schema |    Name     | Type  | Owner
--------+-------------+-------+-------
 public | departments | table | arsen
 public | employees   | table | arsen
(2 rows)

auca_database=# DELETE FROM departments WHERE dept_id = 1;
DELETE 1
auca_database=# \dt
          List of relations
 Schema |    Name     | Type  | Owner
--------+-------------+-------+-------
 public | departments | table | arsen
 public | employees   | table | arsen
(2 rows)

auca_database=# \d employees
auca_database=# DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET NULL
);
CREATE TABLE
auca_database=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
auca_database=# DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER DEFAULT 0 REFERENCES departments(dept_id) ON DELETE SET DEFAULT
);
CREATE TABLE
auca_database=# \ве
invalid command \ве
Try \? for help.
auca_database=# \dt
          List of relations
 Schema |    Name     | Type  | Owner
--------+-------------+-------+-------
 public | departments | table | arsen
 public | employees   | table | arsen
(2 rows)

auca_database=# DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER REFERENCES departments(dept_id) ON DELETE RESTRICT
);
CREATE TABLE
auca_database=# DELETE FROM departments WHERE dept_id = 1;
DELETE 0
auca_database=# DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER REFERENCES departments(dept_id) ON UPDATE CASCADE
);
CREATE TABLE
auca_database=# UPDATE departments SET dept_id = 100 WHERE dept_id = 1;
UPDATE 0
auca_database=# DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    dept_id INTEGER REFERENCES departments(dept_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);
CREATE TABLE
auca_database=# \dt
          List of relations
 Schema |    Name     | Type  | Owner
--------+-------------+-------+-------
 public | departments | table | arsen
 public | employees   | table | arsen
(2 rows)

auca_database=# \d employees
auca_database=# DROP TABLE IF EXISTS employees CASCADE;
DROP TABLE
auca_database=# DROP TABLE IF EXISTS departments CASCADE;
DROP TABLE
auca_database=# \dt
Did not find any relations.
auca_database=# CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE
auca_database=# \dt
       List of relations
 Schema | Name  | Type  | Owner
--------+-------+-------+-------
 public | users | table | arsen
(1 row)

auca_database=# \d users
auca_database=#
CREATE TABLE user_profiles (
    profile_id SERIAL PRIMARY KEY,
    user_id INTEGER UNIQUE NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    bio TEXT,
    profile_picture_url VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
CREATE TABLE
auca_database=# \dt
           List of relations
 Schema |     Name      | Type  | Owner
--------+---------------+-------+-------
 public | user_profiles | table | arsen
 public | users         | table | arsen
(2 rows)

auca_database=# DROP TABLE IF EXISTS user_profiles
auca_database-# DROP TABLE IF EXISTS user_profiles;
ERROR:  syntax error at or near "DROP"
LINE 2: DROP TABLE IF EXISTS user_profiles;
        ^
auca_database=# DROP TABLE IF EXISTS user_profiles;
DROP TABLE
auca_database=# \ве
invalid command \ве
Try \? for help.
auca_database=# \dt
       List of relations
 Schema | Name  | Type  | Owner
--------+-------+-------+-------
 public | users | table | arsen
(1 row)

auca_database=# CREATE TABLE user_profiles (
    user_id INTEGER PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    bio TEXT,
    profile_picture_url VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);
CREATE TABLE
auca_database=# \dt
           List of relations
 Schema |     Name      | Type  | Owner
--------+---------------+-------+-------
 public | user_profiles | table | arsen
 public | users         | table | arsen
(2 rows)

auca_database=# INSERT INTO users (username, email) VALUES
('johndoe', 'john@example.com');
INSERT 0 1
auca_database=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES
(1, 'John', 'Doe', 'Software developer passionate about databases');
INSERT 0 1
auca_database=# INSERT INTO user_profiles (user_id, first_name, last_name) VALUES
(1, 'Jane', 'Smith');
ERROR:  duplicate key value violates unique constraint "user_profiles_pkey"
DETAIL:  Key (user_id)=(1) already exists.
auca_database=# \dt
           List of relations
 Schema |     Name      | Type  | Owner
--------+---------------+-------+-------
 public | user_profiles | table | arsen
 public | users         | table | arsen
(2 rows)

auca_database=# \d user
Did not find any relation named "user".
auca_database=# \d users
auca_database=# \d user_profiles
auca_database=# DROP TABLE IF EXISTS user_profiles;
DROP TABLE
auca_database=# DROP TABLE IF EXISTS users;
DROP TABLE
auca_database=# \dt
Did not find any relations.
auca_database=# CREATE TABLE departments (
    dept_id SERIAL PRIMARY KEY,
    dept_name VARCHAR(100) NOT NULL,
    manager_name VARCHAR(100),
    budget DECIMAL(10,2)
);
CREATE TABLE
auca_database=# CREATE TABLE employees (
    emp_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    position VARCHAR(100),
    salary DECIMAL(10,2),
    hire_date DATE DEFAULT CURRENT_DATE,
    dept_id INTEGER NOT NULL,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT
);
CREATE TABLE
auca_database=# INSERT INTO departments (dept_name, manager_name, budget) VALUES
('Engineering', 'Alice Johnson', 500000.00),
('Marketing', 'Bob Wilson', 200000.00);
INSERT 0 2
auca_database=# INSERT INTO employees (first_name, last_name, position, salary, dept_id) VALUES
('John', 'Smith', 'Software Engineer', 75000.00, 1),
('Jane', 'Doe', 'Senior Developer', 85000.00, 1),
('Mike', 'Brown', 'DevOps Engineer', 80000.00, 1),
('Sarah', 'Davis', 'Marketing Specialist', 55000.00, 2);
INSERT 0 4
auca_database=# SELECT d.dept_name, e.first_name, e.last_name, e.position
FROM departments d
JOIN employees e ON d.dept_id = e.dept_id
ORDER BY d.dept_name, e.last_name;
  dept_name  | first_name | last_name |       position
-------------+------------+-----------+----------------------
 Engineering | Mike       | Brown     | DevOps Engineer
 Engineering | Jane       | Doe       | Senior Developer
 Engineering | John       | Smith     | Software Engineer
 Marketing   | Sarah      | Davis     | Marketing Specialist
(4 rows)

auca_database=# \dt
          List of relations
 Schema |    Name     | Type  | Owner
--------+-------------+-------+-------
 public | departments | table | arsen
 public | employees   | table | arsen
(2 rows)

auca_database=# DROP TABLE IF EXISTS departments;
ERROR:  cannot drop table departments because other objects depend on it
DETAIL:  constraint employees_dept_id_fkey on table employees depends on table departments
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
auca_database=# DROP TABLE IF EXISTS employees;
DROP TABLE
auca_database=# DROP TABLE IF EXISTS departments;
DROP TABLE
auca_database=# \dt
Did not find any relations.
auca_database=# CREATE TABLE students (
    student_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE,
    enrollment_date DATE DEFAULT CURRENT_DATE
);
CREATE TABLE
auca_database=# CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,
    course_code VARCHAR(10) UNIQUE NOT NULL,
    course_name VARCHAR(100) NOT NULL,
    credits INTEGER NOT NULL,
    instructor VARCHAR(100)
);
CREATE TABLE
auca_database=# CREATE TABLE student_enrollments (
    enrollment_id SERIAL PRIMARY KEY,
    student_id INTEGER NOT NULL,
    course_id INTEGER NOT NULL,
    enrollment_date DATE DEFAULT CURRENT_DATE,
    grade CHAR(2),
    FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE,
    UNIQUE(student_id, course_id)
);
CREATE TABLE
auca_database=# \dt
              List of relations
 Schema |        Name         | Type  | Owner
--------+---------------------+-------+-------
 public | courses             | table | arsen
 public | student_enrollments | table | arsen
 public | students            | table | arsen
(3 rows)

auca_database=# INSERT INTO students (first_name, last_name, email) VALUES
('Alice', 'Johnson', 'alice@university.edu'),
('Bob', 'Smith', 'bob@university.edu'),
('Carol', 'Wilson', 'carol@university.edu');
INSERT 0 3
auca_database=# INSERT INTO courses (course_code, course_name, credits, instructor) VALUES
('CS101', 'Introduction to Programming', 3, 'Dr. Brown'),
('CS201', 'Data Structures', 4, 'Dr. Davis'),
('MATH101', 'Calculus I', 4, 'Dr. Wilson');
INSERT 0 3
auca_database=# INSERT INTO student_enrollments (student_id, course_id, grade) VALUES
(1, 1, 'A'),
(1, 2, 'B+'),
(2, 1, 'A-'),
(2, 3, 'B'),
(3, 2, 'A'),
(3, 3, 'A-');
INSERT 0 6
auca_database=# SELECT
    s.first_name || ' ' || s.last_name AS student_name,
    c.course_code,
    c.course_name,
    se.grade,
    se.enrollment_date
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON c.course_id = se.course_id
ORDER BY s.last_name, c.course_code;
auca_database=# SELECT
    s.first_name, s.last_name, se.grade
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN courses c ON se.course_id = c.course_id
WHERE c.course_code = 'CS101';
 first_name | last_name | grade
------------+-----------+-------
 Alice      | Johnson   | A
 Bob        | Smith     | A-
(2 rows)

auca_database=# SELECT
    c.course_code, c.course_name, c.credits, se.grade
FROM courses c
JOIN student_enrollments se ON c.course_id = se.course_id
JOIN students s ON se.student_id = s.student_id
WHERE s.email = 'alice@university.edu';
 course_code |         course_name         | credits | grade
-------------+-----------------------------+---------+-------
 CS101       | Introduction to Programming |       3 | A
 CS201       | Data Structures             |       4 | B+
(2 rows)

auca_database=# \dt
              List of relations
 Schema |        Name         | Type  | Owner
--------+---------------------+-------+-------
 public | courses             | table | arsen
 public | student_enrollments | table | arsen
 public | students            | table | arsen
(3 rows)

auca_database=#