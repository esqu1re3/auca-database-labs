auca_database=# CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100)
);

CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(customer_id),
    total DECIMAL(10,2),
    order_date DATE DEFAULT CURRENT_DATE
);

CREATE TABLE order_items (
    order_item_id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(order_id),
    product_id INTEGER,
    quantity INTEGER
);

CREATE TABLE inventory (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(100),
    stock INTEGER
);
CREATE TABLE
CREATE TABLE
CREATE TABLE
CREATE TABLE
auca_database=# CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    price DECIMAL(10,2)
);
CREATE TABLE
auca_database=# CREATE TABLE logs (
    log_id SERIAL PRIMARY KEY,
    message TEXT,
    created_at TIMESTAMP DEFAULT NOW()
);
CREATE TABLE
auca_database=# CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
auca_database=# INSERT INTO accounts (account_name, balance) VALUauca_database=# INSERT INTO accounts (account_name, balance) VALUES
('Account A', 1500.00),
('Account B', 800.00),
('Account C', 500.00);

INSERT INTO customers (name, email) VALUES
('Alice Johnson', 'alice@email.com'),
('Bob Smith', 'bob@email.com');

INSERT INTO inventory (product_name, stock) VALUES
('Laptop', 10),
('Mouse', 20),
('Keyboard', 15);

INSERT INTO products (name, price) VALUES
('Laptop', 999.99),
('Mouse', 25.99),
('Keyboard', 79.99);
INSERT 0 3
INSERT 0 2
INSERT 0 3
INSERT 0 3
auca_database=# \dt
             List of relations
 Schema |       Name       | Type  | Owner
--------+------------------+-------+-------
 public | accounts         | table | arsen
 public | audit_log        | table | arsen
 public | customers        | table | arsen
 public | inventory        | table | arsen
 public | logs             | table | arsen
 public | order_items      | table | arsen
 public | orders           | table | arsen
 public | products         | table | arsen
 public | user_preferences | table | arsen
 public | users            | table | arsen
(10 rows)

auca_database=# BEGIN;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
COMMIT; -- Both updates are saved permanently
BEGIN
UPDATE 1
UPDATE 1
COMMIT
auca_database=# BEGIN;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
-- Something went wrong, undo everything
ROLLBACK; -- Both updates are undone
BEGIN
UPDATE 1
UPDATE 1
ROLLBACK
auca_database=# BEGIN;

-- Check if account 1 has sufficient balance
SELECT balance FROM accounts WHERE account_id = 1;

-- If sufficient, perform the transfer
UPDATE accounts SET balance = balance - 500 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 500 WHERE account_id = 2;

-- If everything is correct, commit
COMMIT;
BEGIN
 balance
---------
 1400.00
(1 row)

UPDATE 1
UPDATE 1
COMMIT
auca_database=# BEGIN;
INSERT INTO orders (customer_id, total) VALUES (1, 250.00);
INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 101, 2);
UPDATE inventory SET stock = stock - 2 WHERE product_id = 101;
-- If any of these fail, ALL are rolled back
COMMIT;
BEGIN
INSERT 0 1
INSERT 0 1
UPDATE 0
COMMIT
auca_database=# BEGIN;
INSERT INTO customers (name, email) VALUES ('John Doe', 'john@email.com');
INSERT INTO orders (customer_id, total) VALUES (LASTVAL(), 100.00);
COMMIT;
BEGIN
INSERT 0 1
INSERT 0 1
COMMIT
auca_database=# BEGIN TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SELECT * FROM accounts; -- May see uncommitted changes
COMMIT;
BEGIN
 account_id | account_name | balance
------------+--------------+---------
          3 | Account C    |  500.00
          1 | Account A    |  900.00
          2 | Account B    | 1400.00
(3 rows)

COMMIT
auca_database=# BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
SELECT * FROM accounts WHERE balance > 1000;
-- Another transaction might modify data here
SELECT * FROM accounts WHERE balance > 1000; -- May return different results
COMMIT;
BEGIN
 account_id | account_name | balance
------------+--------------+---------
          2 | Account B    | 1400.00
(1 row)

 account_id | account_name | balance
------------+--------------+---------
          2 | Account B    | 1400.00
(1 row)

COMMIT
auca_database=# BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SELECT * FROM accounts WHERE balance > 1000;
-- Even if other transactions modify data, this query will return same results
SELECT * FROM accounts WHERE balance > 1000;
COMMIT;
BEGIN
 account_id | account_name | balance
------------+--------------+---------
          2 | Account B    | 1400.00
(1 row)

 account_id | account_name | balance
------------+--------------+---------
          2 | Account B    | 1400.00
(1 row)

COMMIT
auca_database=# BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SELECT * FROM accounts;
UPDATE accounts SET balance = balance * 1.05; -- 5% interest
COMMIT;
BEGIN
 account_id | account_name | balance
------------+--------------+---------
          3 | Account C    |  500.00
          1 | Account A    |  900.00
          2 | Account B    | 1400.00
(3 rows)

UPDATE 3
COMMIT
auca_database=# SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
WARNING:  SET TRANSACTION can only be used in transaction blocks
SET
auca_database=# BEGIN;

INSERT INTO customers (name, email) VALUES ('Alice', 'alice@email.com');

SAVEPOINT after_customer_insert;

INSERT INTO orders (customer_id, total) VALUES (1, 500.00);

-- Something went wrong with the order, rollback to savepoint
ROLLBACK TO SAVEPOINT after_customer_insert;

-- Customer insert is still there, but order insert is undone
INSERT INTO orders (customer_id, total) VALUES (1, 300.00);

COMMIT; -- Only customer and the second order are committed
BEGIN
INSERT 0 1
SAVEPOINT
INSERT 0 1
ROLLBACK
INSERT 0 1
COMMIT
auca_database=# BEGIN;

INSERT INTO products (name, price) VALUES ('Laptop', 999.99);
SAVEPOINT sp1;

INSERT INTO products (name, price) VALUES ('Mouse', 25.99);
SAVEPOINT sp2;

INSERT INTO products (name, price) VALUES ('Invalid Product', -50.00);
-- This violates business rules

ROLLBACK TO SAVEPOINT sp2; -- Removes invalid product insert
-- Laptop and Mouse inserts are still active

INSERT INTO products (name, price) VALUES ('Keyboard', 79.99);

COMMIT; -- Commits Laptop, Mouse, and Keyboard
BEGIN
INSERT 0 1
SAVEPOINT
INSERT 0 1
SAVEPOINT
INSERT 0 1
ROLLBACK
INSERT 0 1
COMMIT
auca_database=# BEGIN;
INSERT INTO logs (message) VALUES ('Starting process');
SAVEPOINT process_start;

-- Do some work
INSERT INTO logs (message) VALUES ('Process completed');
BEGIN
INSERT 0 1
SAVEPOINT
INSERT 0 1
auca_database=*# BEGIN;
INSERT INTO logs (message) VALUES ('Starting process');
SAVEPOINT process_start;

-- Do some work
INSERT INTO logs (message) VALUES ('Process completed');

-- If everything is OK, release the savepoint
RELEASE SAVEPOINT process_start;

auca_database=# BEGIN;
DO $$
DECLARE
    insufficient_funds EXCEPTION;
    current_balance DECIMAL;
BEGIN
    SELECT balance INTO current_balance FROM accounts WHERE account_id = 1;

    IF current_balance < 100 THEN
        RAISE insufficient_funds;
    END IF;

auca_database=!# BEGIN;
DO $$
DECLARE
    insufficient_funds EXCEPTION;
    current_balance DECIMAL;
BEGIN
    SELECT balance INTO current_balance FROM accounts WHERE account_id = 1;

    IF current_balance < 100 THEN
        RAISE insufficient_funds;
    END IF;

    UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
    UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;

EXCEPTION
    WHEN insufficient_funds THEN
        RAISE NOTICE 'Transaction failed: Insufficient funds';
        ROLLBACK;
END $$;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ERROR:  current transaction is aborted, commands ignored until end of transaction block
auca_database=!# BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
-- Critical financial operations here
COMMIT;

-- For reporting, READ COMMITTED is usually sufficient
BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
-- Generate reports here
COMMIT;
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
BEGIN
COMMIT
auca_database=# BEGIN;

-- Main operation
INSERT INTO orders (customer_id, total) VALUES (1, 1000.00);

SAVEPOINT before_items;

-- Add items (might fail for some items)
INSERT INTO order_items (order_id, product_id, quantity)
VALUES (currval('orders_id_seq'), 101, 2);

-- If this fails, rollback to savepoint and continue
INSERT INTO order_items (order_id, product_id, quantity)
VALUES (currval('orders_id_seq'), 102, 1);

COMMIT;
BEGIN
INSERT 0 1
SAVEPOINT
ERROR:  relation "orders_id_seq" does not exist
LINE 2: VALUES (currval('orders_id_seq'), 101, 2);
                        ^
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK
auca_database=# SELECT
    blocked_locks.pid AS blocked_pid,
    blocked_activity.usename AS blocked_user,
    blocking_locks.pid AS blocking_pid,
    blocking_activity.usename AS blocking_user,
    blocked_activity.query AS blocked_statement
FROM pg_catalog.pg_locks blocked_locks
JOIN pg_catalog.pg_stat_activity blocked_activity
    ON blocked_activity.pid = blocked_locks.pid
JOIN pg_catalog.pg_locks blocking_locks
    ON blocking_locks.locktype = blocked_locks.locktype
WHERE NOT blocked_locks.granted;
ERROR:  missing FROM-clause entry for table "blocking_activity"
LINE 5:     blocking_activity.usename AS blocking_user,
            ^
auca_database=# BEGIN;
INSERT INTO audit_log (action, timestamp) VALUES ('user_creation', NOW());
INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
INSERT INTO user_preferences (user_id, theme) VALUES (currval('users_id_seq'), 'dark');
COMMIT;

-- Avoid: Relying on autocommit for related operations
INSERT INTO audit_log (action, timestamp) VALUES ('user_creation', NOW());
-- If this fails, the audit log entry above is already committed
INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');
BEGIN
INSERT 0 1
INSERT 0 1
ERROR:  relation "users_id_seq" does not exist
LINE 1: ...user_preferences (user_id, theme) VALUES (currval('users_id_...
                                                             ^
ROLLBACK
INSERT 0 1
INSERT 0 1
auca_database=# \dt
             List of relations
 Schema |       Name       | Type  | Owner
--------+------------------+-------+-------
 public | accounts         | table | arsen
 public | audit_log        | table | arsen
 public | customers        | table | arsen
 public | inventory        | table | arsen
 public | logs             | table | arsen
 public | order_items      | table | arsen
 public | orders           | table | arsen
 public | products         | table | arsen
 public | user_preferences | table | arsen
 public | users            | table | arsen
(10 rows)

auca_database=#