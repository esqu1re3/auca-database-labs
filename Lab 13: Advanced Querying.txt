auca_database=# CREATE TABLE employees (
    employee_id SERIAL PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    department VARCHAR(100),
    manager_id INTEGER,
    salary DECIMAL(10,2),
    hire_date DATE,
    tenure INTEGER,
    region_id INTEGER
);
CREATE TABLE
auca_database=# CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    employee_id INTEGER REFERENCES employees(employee_id),
    region_id INTEGER,
    amount DECIMAL(10,2),
    order_date DATE
);
CREATE TABLE
auca_database=# CREATE TABLE warehouse_1 (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(100),
    quantity INTEGER
);
CREATE TABLE
auca_database=# CREATE TABLE warehouse_2 (
    product_id SERIAL PRIMARY KEY,
    product_name VARCHAR(100),
auca_database=# INSERT INTO employees (first_name, last_name, department, manager_id, salary, hire_date, tenure, region_id) VALUES
('Alice', 'Brown', 'Engineering', NULL, 120000, '2018-01-10', 7, 1),
('Bob', 'Smith', 'Engineering', 1, 95000, '2020-06-01', 4, 1),
('Charlie', 'Davis', 'Sales', 1, 70000, '2019-02-15', 5, 2),
('Diana', 'Evans', 'Sales', 3, 65000, '2021-03-01', 3, 2),
('Ethan', 'Green', 'Marketing', 1, 55000, '2022-05-12', 2, 3),
('Fiona', 'White', 'Marketing', 5, 72000, '2017-07-18', 8, 3);

INSERT INTO orders (employee_id, region_id, amount, order_date) VALUES
(3, 2, 1500, '2024-01-15'),
(3, 2, 2300, '2024-02-12'),
(4, 2, 1800, '2024-03-09'),
(5, 3, 2100, '2024-04-05'),
(2, 1, 3300, '2024-04-10');

INSERT INTO warehouse_1 (product_name, quantity) VALUES
('Smartphone', 10),
('Laptop', 5),
('Tablet', 0),
('Headphones', 8);

INSERT INTO warehouse_2 (product_name, quantity) VALUES
('Smartphone', 12),
('Tablet', 3),
('Camera', 6),
('Laptop', 0);

INSERT INTO sales (product_name, year, sales_amount) VALUES
('Smartphone', 2022, 20000),
('Smartphone', 2023, 25000),
('Smartphone', 2024, 27000),
('Laptop', 2022, 15000),
('Laptop', 2023, 18000),
('Laptop', 2024, 22000),
('Tablet', 2022, 8000),
('Tablet', 2023, 9500),
('Tablet', 2024, 12000);

INSERT INTO pivoted_sales (product_name, year_2022, year_2023, year_2024) VALUES
('Smartphone', 20000, 25000, 27000),
('Laptop', 15000, 18000, 22000),
('Tablet', 8000, 9500, 12000);
INSERT 0 6
INSERT 0 5
INSERT 0 4
INSERT 0 4
INSERT 0 9
INSERT 0 3
auca_database=# SELECT first_name, last_name, salary
FROM employees
WHERE salary > (
    SELECT AVG(salary)  -- This scalar subquery returns a single value
    FROM employees
);
 first_name | last_name |  salary
------------+-----------+-----------
 Alice      | Brown     | 120000.00
 Bob        | Smith     |  95000.00
(2 rows)

auca_database=# WITH regional_sales AS (
    SELECT region_id, SUM(amount) AS total_sales
    FROM orders
    GROUP BY region_id
)
SELECT region_id, total_sales
FROM regional_sales
WHERE total_sales > 1000000;
 region_id | total_sales
-----------+-------------
(0 rows)

auca_database=# WITH RECURSIVE org_chart AS (
    -- Anchor: Find the top-level manager (e.g., who has no manager)
    SELECT employee_id, first_name, last_name, manager_id
    FROM employees
    WHERE manager_id IS NULL
    UNION ALL
    -- Recursive: Find everyone who reports to the people already in the chart
    SELECT e.employee_id, e.first_name, e.last_name, e.manager_id
    FROM employees e
    INNER JOIN org_chart oc ON e.manager_id = oc.employee_id
)
SELECT * FROM org_chart;
 employee_id | first_name | last_name | manager_id
-------------+------------+-----------+------------
           1 | Alice      | Brown     |
           2 | Bob        | Smith     |          1
           3 | Charlie    | Davis     |          1
           5 | Ethan      | Green     |          1
           4 | Diana      | Evans     |          3
           6 | Fiona      | White     |          5
(6 rows)

auca_database=# SELECT product_name FROM warehouse_1
UNION
SELECT product_name FROM warehouse_2;

-- Find products that are out of stock in both warehouses
SELECT product_id FROM warehouse_1 WHERE quantity = 0
INTERSECT
SELECT product_id FROM warehouse_2 WHERE quantity = 0;
 product_name
--------------
 Tablet
 Laptop
 Headphones
 Smartphone
 Camera
(5 rows)

 product_id
------------
(0 rows)

auca_database=# SELECT
    first_name,
    last_name,
    department,
    salary,
    RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank
FROM employees;
auca_database=# SELECT
    product_name,
    SUM(CASE WHEN year = 2022 THEN sales_amount ELSE 0 END) AS year_2022,
    SUM(CASE WHEN year = 2023 THEN sales_amount ELSE 0 END) AS year_2023,
    SUM(CASE WHEN year = 2024 THEN sales_amount ELSE 0 END) AS year_2024
auca_database-# SELECT
    product_name,
    SUM(CASE WHEN year = 2022 THEN sales_amount ELSE 0 END) AS year_2022,
    SUM(CASE WHEN year = 2023 THEN sales_amount ELSE 0 END) AS year_2023,
    SUM(CASE WHEN year = 2024 THEN sales_amount ELSE 0 END) AS year_2024
FROM sales
GROUP BY product_name;
Unpivoting with UNION ALL:
ERROR:  syntax error at or near "SELECT"
LINE 6: SELECT
        ^
auca_database-# ^C
auca_database=# SELECT
    product_name,
    SUM(CASE WHEN year = 2022 THEN sales_amount ELSE 0 END) AS year_2022,
    SUM(CASE WHEN year = 2023 THEN sales_amount ELSE 0 END) AS year_2023,
    SUM(CASE WHEN year = 2024 THEN sales_amount ELSE 0 END) AS year_2024
FROM sales
GROUP BY product_name;
Unpivoting with UNION ALL:
 product_name | year_2022 | year_2023 | year_2024
--------------+-----------+-----------+-----------
 Smartphone   |  20000.00 |  25000.00 |  27000.00
 Tablet       |   8000.00 |   9500.00 |  12000.00
 Laptop       |  15000.00 |  18000.00 |  22000.00
(3 rows)

auca_database-# SELECT product_name, '2022' AS year, year_2022 AS sales_amount FROM pivoted_sales
UNION ALL
SELECT product_name, '2023' AS year, year_2023 AS sales_amount FROM pivoted_sales
UNION ALL
SELECT product_name, '2024' AS year, year_2024 AS sales_amount FROM pivoted_sales
ORDER BY product_name, year;
ERROR:  syntax error at or near "Unpivoting"
LINE 1: Unpivoting with UNION ALL:
        ^
auca_database=# SELECT product_name, '2022' AS year, year_2022 AS sales_amount FROM pivoted_sales
UNION ALL
SELECT product_name, '2023' AS year, year_2023 AS sales_amount FROM pivoted_sales
UNION ALL
SELECT product_name, '2024' AS year, year_2024 AS sales_amount FROM pivoted_sales
ORDER BY product_name, year;
 product_name | year | sales_amount
--------------+------+--------------
 Laptop       | 2022 |     15000.00
 Laptop       | 2023 |     18000.00
 Laptop       | 2024 |     22000.00
 Smartphone   | 2022 |     20000.00
 Smartphone   | 2023 |     25000.00
 Smartphone   | 2024 |     27000.00
 Tablet       | 2022 |      8000.00
 Tablet       | 2023 |      9500.00
 Tablet       | 2024 |     12000.00
(9 rows)

auca_database=# SELECT
    employee_id,
    SUM(salary) OVER (PARTITION BY department) AS total_dept_salary,
    AVG(salary) FILTER (WHERE tenure > 5) OVER () AS avg_salary_senior
FROM employees;
 employee_id | total_dept_salary | avg_salary_senior
-------------+-------------------+--------------------
           1 |         215000.00 | 96000.000000000000
           2 |         215000.00 | 96000.000000000000
           5 |         127000.00 | 96000.000000000000
           6 |         127000.00 | 96000.000000000000
           3 |         135000.00 | 96000.000000000000
           4 |         135000.00 | 96000.000000000000
(6 rows)

auca_database=#